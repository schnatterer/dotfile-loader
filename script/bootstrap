#!/usr/bin/env bash
#
# bootstrap installs things.

BASEDIR=$(dirname $0)
DOTFILES_LOADER_ROOT="$(cd ${BASEDIR}/.. && pwd)"
DOTFILES_ROOT=$HOME/.dotfiles

set -e

echo ''

info() {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user() {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success() {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail() {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

clone_dotfiles() {
  if ! [ -d "${DOTFILES_ROOT}" ]; then

    if [ -z "${dotfiles_repo}" ]; then
      user ' - Which dotfiles repo should be used?'
      read -e dotfiles_repo
    fi
    info "Cloning dotfiles ${dotfiles_repo} repo to $HOME/.dotfiles"

    git clone "${dotfiles_repo}" ~/.dotfiles > /dev/null 2>&1

    success 'clone dotfiles'
  fi
}

setup_gitconfig() {
  if ! [ -f "${DOTFILES_LOADER_ROOT}/git/gitconfig.local" ]; then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]; then
      git_credential='osxkeychain'
    fi

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" \
        -e "s/AUTHOREMAIL/$git_authoremail/g" \
        -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" \
        "${DOTFILES_LOADER_ROOT}/git/gitconfig.local.example" \
        > "${DOTFILES_LOADER_ROOT}/git/gitconfig.local"

    success 'gitconfig'
  fi
}

link_file() {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]; then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]; then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]; then

        skip=true

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
        o)
          overwrite=true
          ;;
        O)
          overwrite_all=true
          ;;
        b)
          backup=true
          ;;
        B)
          backup_all=true
          ;;
        s)
          skip=true
          ;;
        S)
          skip_all=true
          ;;
        *) ;;

        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]; then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]; then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]; then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]; then # "false" or empty
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

link_dotfile_loader() {
  dotfile_loader_files=( "${DOTFILES_LOADER_ROOT}/zsh/zshrc" "${DOTFILES_LOADER_ROOT}/git/gitconfig" )

  local overwrite_all=false backup_all=false skip_all=false

  for src in "${dotfile_loader_files[@]}"; do
    dst="$HOME/.$(basename "${src}")"
    link_file "$src" "$dst"
  done
}

install_dotfiles() {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not -path '*.git*' -not -name 'zshrc.symlink' -not -name 'gitconfig.symlink'); do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

runDotfileInstallers() {
  # find the installers and run them iteratively
  find "${DOTFILES_ROOT}" -name install.sh | while read installer; do sh -c "${installer}"; done
}

clone_dotfiles
setup_gitconfig
link_dotfile_loader
install_dotfiles
runDotfileInstallers

echo ''
echo '  All installed!'
